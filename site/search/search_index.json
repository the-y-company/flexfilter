{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"flexfilter","text":"<p>Flexfilter creates a dynamic filter from a <code>data.frame</code>, It will allow users to dynamically add filters based on the  columns present in the <code>data.frame</code>.</p> <p>Info</p> <p>This package was funded by The Association of State and Territorial Health Officials </p> <p>The flexfilter is used the Astho\u2019s Profile dashboard that was presented at the Shinconf 2024.</p>"},{"location":"attributes/","title":"Attributes","text":"<p>Inputs can be modified with <code>attributes</code>:</p> <ul> <li><code>label</code>: Change the label of the input.</li> <li><code>description</code>: Adds a description to the input.</li> <li><code>group</code>: Place inputs in groups (subheading).</li> </ul> <p>Warning</p> <p>If you use the <code>group</code> attribute make sure all your columns are placed within a group or they will be dropped from the filter.</p> <pre><code>library(shiny)\nlibrary(flexfilter)\n\ndata &lt;- data.frame(\n  text = letters[1:10],\n  factors = as.factor(c(LETTERS[1:7], NA_character_, \"null\", \"Long with space\")),\n  numeric = runif(10),\n  integer = 1:10,\n  date = seq.Date(Sys.Date()-9, Sys.Date(), by = \"day\"),\n  logical = sample(c(T, F), 10, replace = TRUE)\n)\n\n# label and description\nattr(data$date, \"label\") &lt;- \"This is a date!\"\nattr(data$date, \"description\") &lt;- \"This describes the date\"\n\n# groups\nattr(data$text, \"group\") &lt;- \"Group A\"\nattr(data$numeric, \"group\") &lt;- \"Group A\"\nattr(data$date, \"group\") &lt;- \"Group B\"\nattr(data$integer, \"group\") &lt;- \"Group B\"\nattr(data$logical, \"group\") &lt;- \"Group A\"\nattr(data$factors, \"group\") &lt;- \"Group B\"\n\nui &lt;- fluidPage(\n  theme = bslib::bs_theme(5L),\n  div(\n    style = \"width:50%\",\n    flexfilterUI(\"filter\"),\n  ),\n  DT::DTOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session) {\n  # only return variable names\n  values &lt;- flexfilter_server(\"filter\", data, search_threshold = 0)\n\n  observe({\n    print(values())\n  })\n\n  output$table &lt;- DT::renderDT({\n    print(values())\n    if(!length(values()))\n      return(data)\n\n    data |&gt;\n      dplyr::filter(!!!values()$exprs) |&gt;\n      DT::datatable()\n  })\n}\n\nshinyApp(ui, server, options = list(port = 3003L))\n</code></pre> <p></p>"},{"location":"get-started/","title":"Get Started","text":"<p>At its core flexfilter is a shiny module with a UI and server component.</p> <p>Call <code>flexfilterUI()</code> where you want the filter to be placed in your interface. And call <code>flexfilter_server()</code> in your server; this will return a reactive containing either the filtering expression to use with dplyr or a vector of variables that you want to select from your <code>data.frame</code>.</p> <p>Flexfilter will create a different input based on the type of the column:</p> <ul> <li><code>factor</code>: creates a selectize input where multiple values can be selected.</li> <li><code>character</code>: creates a text input.</li> <li><code>numeric</code> and <code>integer</code>: creates a range input where a range can be selected.</li> <li><code>date</code>: creates a date range input.</li> <li><code>logical</code>: creates a checkbox input.</li> </ul> <p>Note</p> <p>Note how the expression returned by the <code>flexfilter_server()</code> function is being used below (<code>dplyr::filter(data, !!!values()$exprs)</code>)</p> <pre><code>library(shiny)\nlibrary(flexfilter)\n\ndata &lt;- data.frame(\n  text = letters[1:10],\n  factors = as.factor(LETTERS[1:10]),\n  numeric = runif(10),\n  integer = 1:10,\n  date = seq.Date(Sys.Date()-9, Sys.Date(), by = \"day\"),\n  logical = sample(c(T, F), 10, replace = TRUE)\n)\n\nui &lt;- fluidPage(\n  theme = bslib::bs_theme(5L),\n  # flexfilter UI\n  flexfilterUI(\"filter\"),\n  DT::DTOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session) {\n  # flexfilter server\n  values &lt;- flexfilter_server(\"filter\", data)\n\n  output$table &lt;- DT::renderDT({\n    if(!length(values()$exprs))\n      return(data)\n\n    data |&gt;\n      # filter values\n      dplyr::filter(!!!values()$exprs) |&gt;\n      DT::datatable()\n  })\n}\n\nshinyApp(ui, server)\n</code></pre> <p></p>"},{"location":"installation/","title":"Install","text":"<p>flexfilter is not yet on CRAN, you can get it from Github.</p> <p>Using remotes</p> <pre><code># install.packages(\"remotes\")\nremotes::install_github(\"the-y-company/flexfilter\")\n</code></pre> <p>Using pak</p> <pre><code># install.packages(\"pak\")\npak::pkg_install(\"the-y-company/flexfilter\")\n</code></pre>"},{"location":"search/","title":"Search","text":"<p>The <code>flexfilter_server()</code> function accepts a <code>search_threshold</code> argument which  allows displaying a search functionality when the number of columns in the <code>data.frame</code> exceeds the <code>search_threshold</code>.</p> <pre><code>library(shiny)\nlibrary(flexfilter)\n\ndata &lt;- data.frame(\n  text = letters[1:10],\n  factors = as.factor(LETTERS[1:10]),\n  numeric = runif(10),\n  integer = 1:10,\n  date = seq.Date(Sys.Date()-9, Sys.Date(), by = \"day\"),\n  logical = sample(c(T, F), 10, replace = TRUE)\n)\n\nui &lt;- fluidPage(\n  theme = bslib::bs_theme(5L),\n  # flexfilter UI\n  flexfilterUI(\"filter\"),\n  DT::DTOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session) {\n  # flexfilter server\n  values &lt;- flexfilter_server(\"filter\", data, search_threshold = 0L)\n\n  output$table &lt;- DT::renderDT({\n    if(!length(values()$exprs))\n      return(data)\n\n    data |&gt;\n      # filter values\n      dplyr::filter(!!!values()$exprs) |&gt;\n      DT::datatable()\n  })\n}\n\nshinyApp(ui, server)\n</code></pre> <p></p>"},{"location":"variables/","title":"Variables","text":"<p>You can also use the flexfilter not to filter but to display and select columns from the <code>data.frame</code>, this has little to advantage over using a selectize  input; it was added to have a consistent look and feel with the filter.</p> <p>Note</p> <p>The <code>flexfilter_server()</code> will then return a <code>vector</code> of variables to select.</p> <pre><code>library(shiny)\nlibrary(flexfilter)\n\ndata &lt;- data.frame(\n  text = letters[1:10],\n  factors = as.factor(LETTERS[1:10]),\n  numeric = runif(10),\n  integer = 1:10,\n  date = seq.Date(Sys.Date()-9, Sys.Date(), by = \"day\"),\n  logical = sample(c(T, F), 10, replace = TRUE)\n)\n\nui &lt;- fluidPage(\n  theme = bslib::bs_theme(5L),\n  # flexfilter UI\n  flexfilterUI(\"filter\"),\n  DT::DTOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session) {\n  # flexfilter server\n  values &lt;- flexfilter_server(\"filter\", data, variables_only = TRUE)\n\n  output$table &lt;- DT::renderDT({\n    if(!length(values()))\n      return(data)\n\n    data |&gt;\n      # filter values\n      dplyr::select(values()) |&gt;\n      DT::datatable()\n  })\n}\n\nshinyApp(ui, server)\n</code></pre> <p></p>"}]}